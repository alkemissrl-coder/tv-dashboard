name: Sync Stooq CSV (to €/g) — robust

permissions:
  contents: write

on:
  schedule:
    - cron: "10 * * * *"    # ogni ora al minuto 10 (UTC)
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
  uses: actions/checkout@v4
  with:
    persist-credentials: true
    fetch-depth: 0


      - name: Warm-up cookie su stooq.com
        run: |
          set -euo pipefail
          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome Safari"
          curl -fsSL -A "$UA" -c cookies.txt https://stooq.com/ -o /dev/null

      - name: Scarica GOLD XAU/EUR (daily) con retry
        run: |
          set -euo pipefail
          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome Safari"
          curl -fL --retry 5 --retry-delay 2 --retry-connrefused --compressed \
               -A "$UA" -b cookies.txt -c cookies.txt \
               "https://stooq.com/q/d/l/?s=xaueur&i=d" -o raw_gold.csv
          test -s raw_gold.csv
          head -n 2 raw_gold.csv || true

      - name: Scarica SILVER XAG/EUR (daily) con retry
        run: |
          set -euo pipefail
          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome Safari"
          curl -fL --retry 5 --retry-delay 2 --retry-connrefused --compressed \
               -A "$UA" -b cookies.txt -c cookies.txt \
               "https://stooq.com/q/d/l/?s=xageur&i=d" -o raw_silver.csv
          test -s raw_silver.csv
          head -n 2 raw_silver.csv || true

      - name: Converti €/oz → €/g (senza KeyError, header agnostico)
        run: |
          python - <<'PY'
          import csv, unicodedata
          from decimal import Decimal, ROUND_HALF_UP

          OZ_TO_G = Decimal('31.1035')

          def norm(s:str)->str:
              # lower + rimozione accenti per intercettare 'zamkniecie' ecc.
              s = s.strip().lower()
              s = unicodedata.normalize('NFKD', s)
              return ''.join(ch for ch in s if not unicodedata.combining(ch))

          def convert(src, dst):
              # leggi con BOM-safe e auto-delimiter
              with open(src, 'r', encoding='utf-8-sig', newline='') as f:
                  sample = f.read(2048)
                  f.seek(0)
                  try:
                      dialect = csv.Sniffer().sniff(sample, delimiters=',;')
                  except Exception:
                      dialect = csv.excel
                  reader = csv.reader(f, dialect)
                  rows = [r for r in reader if any(cell.strip() for cell in r)]

              if not rows:
                  raise SystemExit(f"Nessun dato in {src}")

              header = [h.lstrip('\ufeff') for h in rows[0]]
              data_rows = rows[1:]

              # individua indici 'date|data' e 'close|zamkniecie|c|last|price'
              lower = [norm(h) for h in header]
              date_idx = None
              for cand in ('date','data'):
                  if cand in lower:
                      date_idx = lower.index(cand); break
              if date_idx is None: date_idx = 0  # fallback

              close_idx = None
              for cand in ('close','zamkniecie','zamkniecie','c','last','price','zamkniecia'):
                  if cand in lower:
                      close_idx = lower.index(cand); break
              if close_idx is None: close_idx = len(header)-1  # fallback

              out=[]
              for row in data_rows:
                  if len(row) <= max(date_idx, close_idx): 
                      continue
                  d = row[date_idx].strip()
                  raw = row[close_idx].strip().replace(',', '.')
                  if not d or not raw:
                      continue
                  try:
                      v = Decimal(raw)
                  except Exception:
                      continue
                  eur_per_g = (v / OZ_TO_G).quantize(Decimal('0.0001'), rounding=ROUND_HALF_UP)
                  out.append((d, str(eur_per_g)))

              # ordina per data ISO se possibile (Stooq usa YYYY-MM-DD)
              out.sort(key=lambda x: x[0])

              with open(dst, 'w', newline='') as f2:
                  w = csv.writer(f2)
                  w.writerow(['date','eur_per_g'])
                  w.writerows(out)

          convert('raw_gold.csv','gold_history.csv')
          convert('raw_silver.csv','silver_history.csv')
          PY

      - name: Mostra ultime righe (debug)
        run: |
          echo '--- gold_history.csv (tail) ---'
          tail -n 5 gold_history.csv || true
          echo '--- silver_history.csv (tail) ---'
          tail -n 5 silver_history.csv || true

      - name: Commit & push se ci sono cambiamenti
        run: |
          git config user.name  "csv-bot"
          git config user.email "csv-bot@users.noreply.github.com"
          git add gold_history.csv silver_history.csv || true
          git diff --cached --quiet && echo "Nessun cambiamento" || (git commit -m "Auto update CSV $(date -u +%F' '%T'Z')" && git push)
